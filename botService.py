import asyncio # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
import logging # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
import io      # input/output (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç–æ–∫–æ–º –±–∞–π—Ç–æ–≤)
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, filters  # –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
from aiogram.enums.parse_mode import ParseMode  # –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage  # –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
from aiogram import types, Router    # –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
from aiogram.types import Message       # –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
from aiogram.filters import Command     # –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
from aiogram.fsm.state import State, StatesGroup
import numpy as np               # –∏–º–ø–æ—Ä—Ç numpy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–æ–º
from fileService import save_to_file, load_from_file, save_user_data, load_user_data
from cbrService import getCurrency


async def runBot(botToken):
    globalCurrencyFilename= "userCurrencies"
    globalNumsFilename = "userNums"


    class Form(StatesGroup):
        num = State()
        cur = State()
    
    bot = Bot(
                token=botToken,
                default=DefaultBotProperties(
                    parse_mode=ParseMode.HTML,
                )
        )
    router=Router()
    dp = Dispatcher(storage=MemoryStorage()) #–≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    dp.include_router(router) #–¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ "router" –≤ –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    @router.message(Command("start"))
    async def start_handler(msg: Message, state: FSMContext):
        builder = ReplyKeyboardBuilder()
        
        builder.row(
            types.KeyboardButton(text="USD üá∫üá∏"),
            types.KeyboardButton(text="EUR üá™üá∫")
        )
        builder.row(
            types.KeyboardButton(text="HKD üá≠üá∞"),
            types.KeyboardButton(text="GBP üá¨üáß")
        )
        builder.row(
            types.KeyboardButton(text="AED üá¶üá™"),
            types.KeyboardButton(text="TRY üáπüá∑")
        )

        user_id = msg.from_user.id  
        save_user_data(user_id, "", globalCurrencyFilename)
        save_user_data(user_id, -1, globalNumsFilename)

        helloText= """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å!\n–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:"""
        await state.set_state(Form.cur)
        await msg.answer(
            helloText,
            reply_markup=builder.as_markup(resize_keyboard=True)
        )

    @router.message(Form.cur)
    async def chooseCurrency(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state is None:
            return
        if current_state != Form.cur.state:
            return
        try:
            currency = message.text
            await state.clear()
            builder = ReplyKeyboardBuilder()
            builder.row(
            types.KeyboardButton(text="—Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"),
                types.KeyboardButton(text="–∫—É—Ä—Å –≤–∞–ª—é—Ç")
            )
            await state.update_data(selCur = currency)
            user_id = message.from_user.id  
            save_user_data(user_id, currency, globalCurrencyFilename)
            await message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞ {currency}. \n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=builder.as_markup(resize_keyboard=True))
        except ValueError:
            await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return 

    @router.message(F.text.casefold() == "—Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    async def enter_num(message: types.Message, state: FSMContext):
        await state.clear()
        await state.set_state(Form.num)
        await message.reply("–ó–∞–¥–∞–π—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ).")

    @router.message(Form.num)
    async def enterNum(message: types.Message, state: FSMContext):
        try:
            number = int(message.text)
            user_id = message.from_user.id  
            save_user_data(user_id, number, globalNumsFilename)
            user_data = load_user_data(globalCurrencyFilename)
            currency = user_data.get(str(user_id), "??")
            await message.answer(f"–°–ø–∞—Å–∏–±–æ! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è {currency} –±—É–¥–µ—Ç –±–æ–ª—å—à–µ {number}!")
            await state.clear()
        except ValueError:
            await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    @router.message(F.text.casefold() == "–∫—É—Ä—Å –≤–∞–ª—é—Ç")
    async def enter_num(message: types.Message, state: FSMContext):
        await state.clear()
        user_id = message.from_user.id
        user_data = load_user_data(globalCurrencyFilename)  
        currency = user_data.get(str(user_id), "??")
        currency = currency.split(" ")[0]
        today = datetime.now().strftime('%Y-%m-%d')
        info = getCurrency(today, currency.upper())
        if info is not None:
            await message.reply(f"–ö—É—Ä—Å {currency} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n–ö—É—Ä—Å: {info['rate']}\n–ù–æ–º–∏–Ω–∞–ª: {info['nominal']}\n–ö–æ–¥: {info['code']}\n–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {info['name']}")
        else:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–¥–Ω–µ–µ.")
            
    await bot.delete_webhook(drop_pending_updates=True) # –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–æ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types()) 